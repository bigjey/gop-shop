// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  parentId  Int?
  sortOrder Int?       @default(1)
  isActive  Boolean
  createdAt DateTime   @default(now()) @db.Timestamp(6)
  updatedAt DateTime?
  parent    Category?  @relation("parent", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children  Category[] @relation("parent")
  Product   Product[]
}

model Product {
  id           Int             @id @default(autoincrement())
  name         String
  price        Float           @default(0.0)
  description  String?
  isAvailable  Boolean         @default(true)
  isActive     Boolean         @default(true)
  isFeatured   Boolean         @default(false)
  saleValue    Int?
  categoryId   Int?
  specPresetId Int?
  category     Category?       @relation(fields: [categoryId], references: [id])
  images       ProductImage[]
  reviews      ProductReview[]
  specValues   SpecValue[]
  specPresets  SpecPreset[]    @relation(fields: [specPresetId], references: [id])
  rating       Float?          @default(0.0)
}

enum ReviewStatus {
  new
  pending
  proofed
}

model ProductReview {
  id        Int          @id @default(autoincrement())
  text      String
  score     Int
  status    ReviewStatus @default(new)
  userId    Int
  createdAt DateTime     @default(now()) @db.Timestamp(6)
  productId Int
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Spec {
  id     Int                   @id @default(autoincrement())
  name   String                @unique()
  values SpecPresetGroupItem[]
}

model SpecPreset {
  id           Int               @id @default(autoincrement())
  name         String            @unique()
  presetGroups SpecPresetGroup[]
  products     Product[]
}

model SpecPresetGroup {
  id               Int                   @id @default(autoincrement())
  name             String                @unique()
  presetId         Int
  preset           SpecPreset            @relation(fields: [presetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sortOrder        Int                   @default(1)
  presetGroupItems SpecPresetGroupItem[]
}

model SpecPresetGroupItem {
  id            Int             @id @default(autoincrement())
  presetGroupId Int
  specId        Int
  sortOrder     Int             @default(1)
  presetGroup   SpecPresetGroup @relation(fields: [presetGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  values        SpecValue[]
  spec          Spec            @relation(fields: [specId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SpecValue {
  id                    Int                 @id @default(autoincrement())
  productId             Int
  specPresetGroupItemId Int
  value                 String
  product               Product             @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  presetGroupItem       SpecPresetGroupItem @relation(fields: [specPresetGroupItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([productId, specPresetGroupItemId], map: "productId_specPresetGroupItemId_unique_constraint")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  publicId  String
  sortOrder Int     @default(1)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum UserRole {
  SuperAdmin
  Admin
  Customer
}

model User {
  id       Int      @id @default(autoincrement())
  name     String?
  email    String   @unique
  password String
  role     UserRole
}

model ResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime @default(now()) @db.Timestamp(6)
}
